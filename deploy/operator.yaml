apiVersion: apps/v1
kind: Deployment
metadata:
  name: kubedb-${KUBEDB_OPERATOR_NAME}
  namespace: ${KUBEDB_NAMESPACE}
  labels:
    app: kubedb
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kubedb
      class: ${KUBEDB_OPERATOR_NAME}
  template:
    metadata:
      labels:
        app: kubedb
        class: ${KUBEDB_OPERATOR_NAME}
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ''
    spec:
      serviceAccountName: ${KUBEDB_SERVICE_ACCOUNT}
      imagePullSecrets: [${KUBEDB_IMAGE_PULL_SECRET}]
      containers:
      - name: operator
        image: ${KUBEDB_DOCKER_REGISTRY}/${KUBEDB_OPERATOR_NAME}:${KUBEDB_OPERATOR_TAG}
        imagePullPolicy: ${KUBEDB_IMAGE_PULL_POLICY}
        args:
        - run
        - --v=3
        - --governing-service=kubedb
        - --rbac=${KUBEDB_ENABLE_RBAC}
        - --secure-port=8443
        - --audit-log-path=-
        - --tls-cert-file=/var/serving-cert/tls.crt
        - --tls-private-key-file=/var/serving-cert/tls.key
        - --enable-mutating-webhook=${KUBEDB_ENABLE_MUTATING_WEBHOOK}
        - --enable-validating-webhook=${KUBEDB_ENABLE_VALIDATING_WEBHOOK}
        - --bypass-validating-webhook-xray=${KUBEDB_BYPASS_VALIDATING_WEBHOOK_XRAY}
        - --use-kubeapiserver-fqdn-for-aks=${KUBEDB_USE_KUBEAPISERVER_FQDN_FOR_AKS}
        - --enable-analytics=${KUBEDB_ENABLE_ANALYTICS}
        env:
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: MY_POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        ports:
        - containerPort: 8443
        volumeMounts:
        - mountPath: /var/serving-cert
          name: serving-cert
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8443
            scheme: HTTPS
          initialDelaySeconds: 5
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8443
            scheme: HTTPS
          initialDelaySeconds: 15
          timeoutSeconds: 15
        resources:
          requests:
            cpu: "100m"
      nodeSelector:
        beta.kubernetes.io/os: linux
        beta.kubernetes.io/arch: amd64
      volumes:
      - name: serving-cert
        secret:
          defaultMode: 420
          secretName: kubedb-${KUBEDB_OPERATOR_NAME}-apiserver-cert
      tolerations:
      - key: CriticalAddonsOnly
        operator: Exists
      priorityClassName: ${KUBEDB_PRIORITY_CLASS}
---
# kube lacks the service serving cert signer, so provide a manual secret for it
apiVersion: v1
kind: Secret
metadata:
  name: kubedb-${KUBEDB_OPERATOR_NAME}-apiserver-cert
  namespace: ${KUBEDB_NAMESPACE}
  labels:
    app: kubedb
type: kubernetes.io/tls
data:
  tls.crt: ${TLS_SERVING_CERT}
  tls.key: ${TLS_SERVING_KEY}
---
apiVersion: v1
kind: Service
metadata:
  name: kubedb-${KUBEDB_OPERATOR_NAME}
  namespace: ${KUBEDB_NAMESPACE}
  labels:
    app: kubedb
spec:
  ports:
  - name: api
    port: 443
    targetPort: 8443
  selector:
    app: kubedb
    class: ${KUBEDB_OPERATOR_NAME}
---
# register as aggregated apiserver
apiVersion: apiregistration.k8s.io/v1beta1
kind: APIService
metadata:
  name: v1alpha1.validators.kubedb.com
  labels:
    app: kubedb
spec:
  caBundle: ${SERVICE_SERVING_CERT_CA}
  group: validators.kubedb.com
  groupPriorityMinimum: 1000
  versionPriority: 15
  service:
    name: kubedb-${KUBEDB_OPERATOR_NAME}
    namespace: ${KUBEDB_NAMESPACE}
  version: v1alpha1
---
# register as aggregated apiserver
apiVersion: apiregistration.k8s.io/v1beta1
kind: APIService
metadata:
  name: v1alpha1.mutators.kubedb.com
  labels:
    app: kubedb
spec:
  caBundle: ${SERVICE_SERVING_CERT_CA}
  group: mutators.kubedb.com
  groupPriorityMinimum: 1000
  versionPriority: 15
  service:
    name: kubedb-${KUBEDB_OPERATOR_NAME}
    namespace: ${KUBEDB_NAMESPACE}
  version: v1alpha1
