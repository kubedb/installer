/*
Copyright AppsCode Inc. and Contributors

Licensed under the AppsCode Community License 1.0.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    https://github.com/appscode/licenses/raw/1.0.0/AppsCode-Community-1.0.0.md

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package main

import (
	"bytes"
	"fmt"
	"os"
	"path/filepath"
	"sort"
	"strconv"

	"kubedb.dev/installer/cmd/lib"

	"github.com/olekukonko/tablewriter"
	"kubeops.dev/scanner/apis/trivy"
)

func main() {
	reports, err := GatherReport()
	if err != nil {
		panic(err)
	}
	data := GenerateMarkdownReport(reports)

	rootDir, err := lib.RootDir()
	if err != nil {
		panic(err)
	}

	readmeFile := filepath.Join(rootDir, "catalog", "kubedb", "README.md")
	err = os.WriteFile(readmeFile, data, 0o644)
	if err != nil {
		panic(err)
	}
}

type CVEReport struct {
	Ref      string
	Critical Stats
	High     Stats
	Medium   Stats
	Low      Stats
	Unknown  Stats
}

type Stats struct {
	OS    int
	Other int
}

func (s Stats) String() string {
	b, a := "0", "0"
	if s.OS >= 0 {
		b = strconv.Itoa(s.OS)
	}
	if s.Other >= 0 {
		a = strconv.Itoa(s.Other)
	}
	return fmt.Sprintf("%s, %s", b, a)
}

func (s Stats) Zero() bool {
	return s.OS+s.Other == 0
}

func (r CVEReport) NoCVE() bool {
	return r.Critical.Zero() &&
		r.High.Zero() &&
		r.Medium.Zero() &&
		r.Low.Zero() &&
		r.Unknown.Zero()
}

func (r CVEReport) Headers() []string {
	return []string{
		"Image Ref",
		"Critical",
		"High",
		"Medium",
		"Low",
		"Unknown",
	}
}

func (r CVEReport) Strings() []string {
	return []string{
		r.Ref,
		r.Critical.String(),
		r.High.String(),
		r.Medium.String(),
		r.Low.String(),
		r.Unknown.String(),
	}
}

// "Class": "os-pkgs",
func GatherReport() ([]CVEReport, error) {
	images, err := lib.ListImages()
	if err != nil {
		return nil, err
	}

	sh := lib.NewShell()

	reports := make([]CVEReport, 0, len(images))
	for _, ref := range images {
		cveReport := CVEReport{
			Ref:      ref,
			Critical: Stats{OS: -1, Other: -1},
			High:     Stats{OS: -1, Other: -1},
			Medium:   Stats{OS: -1, Other: -1},
			Low:      Stats{OS: -1, Other: -1},
			Unknown:  Stats{OS: -1, Other: -1},
		}
		if found, err := lib.ImageExists(ref); err != nil {
			return nil, err
		} else if found {
			report, err := lib.Scan(sh, ref)
			if err != nil {
				return nil, err
			}
			setReport(report, &cveReport)
		}
		reports = append(reports, cveReport)

		break
	}

	return reports, nil
}

func setReport(report *trivy.SingleReport, result *CVEReport) {
	for _, rpt := range report.Results {
		for _, tv := range rpt.Vulnerabilities {
			switch tv.Severity {
			case "CRITICAL":
				if rpt.Class == "os-pkgs" {
					result.Critical.OS += 1
				} else {
					result.Critical.Other += 1
				}
			case "HIGH":
				if rpt.Class == "os-pkgs" {
					result.High.OS += 1
				} else {
					result.High.Other += 1
				}
			case "MEDIUM":
				if rpt.Class == "os-pkgs" {
					result.Medium.OS += 1
				} else {
					result.Medium.Other += 1
				}
			case "LOW":
				if rpt.Class == "os-pkgs" {
					result.Low.OS += 1
				} else {
					result.Low.Other += 1
				}
			case "UNKNOWN":
				if rpt.Class == "os-pkgs" {
					result.Unknown.OS += 1
				} else {
					result.Unknown.Other += 1
				}
			}
		}
	}
}

func GenerateMarkdownReport(reports []CVEReport) []byte {
	var buf bytes.Buffer
	buf.WriteString("# CVE Report:")
	buf.WriteRune('\n')
	buf.Write(generateMarkdownTable(reports))

	return buf.Bytes()
}

func generateMarkdownTable(reports []CVEReport) []byte {
	var tr CVEReport

	data := make([][]string, 0, len(reports))
	for _, r := range reports {
		data = append(data, r.Strings())
	}
	sort.Slice(data, func(i, j int) bool {
		return data[i][0] < data[j][0]
	})

	var buf bytes.Buffer

	table := tablewriter.NewWriter(&buf)
	table.SetHeader(tr.Headers())
	table.SetBorders(tablewriter.Border{Left: true, Top: false, Right: true, Bottom: false})
	table.SetCenterSeparator("|")
	table.AppendBulk(data) // Add Bulk Data
	table.Render()

	return buf.Bytes()
}
