name: CI

on:
  push:
    branches-ignore:
      - 'release-*'
    tags-ignore:
      - '*.*'

jobs:

  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        k8s: [v1.12.10, v1.13.10, v1.14.6, v1.15.3, v1.16.2]
    steps:

    - name: Check out code into the Go module directory
      uses: actions/checkout@v1

    - name: Run checks
      run: |
        sudo apt-get -qq update
        sudo apt-get install -y bzr
        make ci

    - name: Create Kubernetes ${{ matrix.k8s }} cluster
      id: kind
      uses: engineerd/setup-kind@v0.1.0
      with:
        config: hack/kubernetes/kind.yaml
        image: kindest/node:${{ matrix.k8s }}

    - name: Prepare cluster for testing
      id: local-path
      env:
        DOCKER_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        USERNAME: 1gtm
        REGISTRY_SECRET: regcred
      run: |
        export KUBECONFIG="$(kind get kubeconfig-path)"
        echo
        echo "waiting for nodes to be ready ..."
        kubectl wait --for=condition=Ready nodes --all --timeout=5m
        kubectl get nodes
        echo
        echo "installing local-path provisioner ..."
        kubectl delete storageclass --all
        kubectl apply -f https://github.com/rancher/local-path-provisioner/raw/v0.0.11/deploy/local-path-storage.yaml
        kubectl wait --for=condition=Ready pods -n local-path-storage --all --timeout=5m
        kubectl apply -f hack/kubernetes/storageclass/standard.yaml
        echo
        echo "create docker-registry secret"
        kubectl create secret docker-registry ${REGISTRY_SECRET} --namespace=kube-system --docker-server=https://index.docker.io/v1/ --docker-username=${USERNAME} --docker-password=${DOCKER_TOKEN}

    - name: Test charts
      run: |
        export KUBECONFIG="$(kind get kubeconfig-path)"
        make ct TEST_CHARTS=charts/kubedb
        echo
        kubectl apply -f https://github.com/kubedb/apimachinery/raw/master/api/crds/catalog.kubedb.com_elasticsearchversions.yaml
        kubectl apply -f https://github.com/kubedb/apimachinery/raw/master/api/crds/catalog.kubedb.com_etcdversions.yaml
        kubectl apply -f https://github.com/kubedb/apimachinery/raw/master/api/crds/catalog.kubedb.com_memcachedversions.yaml
        kubectl apply -f https://github.com/kubedb/apimachinery/raw/master/api/crds/catalog.kubedb.com_mongodbversions.yaml
        kubectl apply -f https://github.com/kubedb/apimachinery/raw/master/api/crds/catalog.kubedb.com_mysqlversions.yaml
        kubectl apply -f https://github.com/kubedb/apimachinery/raw/master/api/crds/catalog.kubedb.com_perconaxtradbversions.yaml
        kubectl apply -f https://github.com/kubedb/apimachinery/raw/master/api/crds/catalog.kubedb.com_pgbouncerversions.yaml
        kubectl apply -f https://github.com/kubedb/apimachinery/raw/master/api/crds/catalog.kubedb.com_postgresversions.yaml
        kubectl apply -f https://github.com/kubedb/apimachinery/raw/master/api/crds/catalog.kubedb.com_proxysqlversions.yaml
        kubectl apply -f https://github.com/kubedb/apimachinery/raw/master/api/crds/catalog.kubedb.com_redisversions.yaml
        kubectl wait --for=condition=NamesAccepted crds --all --timeout=5m
        make ct TEST_CHARTS=charts/kubedb-catalog

    - name: Test script installer
      run: |
        export KUBECONFIG="$(kind get kubeconfig-path)"
        echo "installing operator"
        ./deploy/kubedb.sh
        echo
        echo "uninstalling operator"
        ./deploy/kubedb.sh --uninstall
        echo
        echo "purging operator"
        ./deploy/kubedb.sh --uninstall --purge
