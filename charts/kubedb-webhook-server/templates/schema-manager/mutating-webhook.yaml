{{ $featureGates := .Values.featureGates }}
{{- if .Values.global }}
  {{ $featureGates = mergeOverwrite dict .Values.featureGates .Values.global.featureGates }}
{{- end }}

{{- if .Values.apiserver.enableMutatingWebhook }}
{{- if list "kubedb-webhook-server" "kubedb-schema-manager" | has .Values.server.repository }}

{{- $caCrt := dig "data" "ca.crt" "unknown" (lookup "v1" "ConfigMap" .Release.Namespace "kube-root-ca.crt") | b64enc }}

apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: mutators.schema.kubedb.com
  labels:
    app.kubernetes.io/component: kubedb-schema-manager
    {{- include "kubedb-webhook-server.labels" . | nindent 4 }}
webhooks:
{{- if $featureGates.MySQL }}
- name: mysqldatabasewebhook.mutators.schema.kubedb.com
  clientConfig:
    service:
      namespace: default
      name: kubernetes
      path: /apis/mutators.schema.kubedb.com/v1alpha1/mysqldatabasewebhooks
    caBundle: {{ $caCrt }}
  rules:
  - apiGroups: ["schema.kubedb.com"]
    apiVersions: ["*"]
    resources: ["mysqldatabases"]
    operations: ["CREATE", "UPDATE"]
  admissionReviewVersions: ["v1beta1"]
  failurePolicy: {{ .Values.apiserver.webhook.failurePolicy }}
  sideEffects: None
{{- end }}
{{- if $featureGates.MongoDB }}
- name: mongodbdatabasewebhook.mutators.schema.kubedb.com
  clientConfig:
    service:
      namespace: default
      name: kubernetes
      path: /apis/mutators.schema.kubedb.com/v1alpha1/mongodbdatabasewebhooks
    caBundle: {{ $caCrt }}
  rules:
  - apiGroups: ["schema.kubedb.com"]
    apiVersions: ["*"]
    resources: ["mongodbdatabases"]
    operations: ["CREATE", "UPDATE"]
  admissionReviewVersions: ["v1beta1"]
  failurePolicy: {{ .Values.apiserver.webhook.failurePolicy }}
  sideEffects: None
{{- end }}
{{- end }}
{{- end }}
