# Default values for kubedb.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

global:
  # License for the product.
  # Get a license by following the steps from [here](https://kubedb.com/docs/latest/setup/install/enterprise#get-a-trial-license).
  # Example:
  # helm install appscode/kubedb \
  #   --set-file global.license=/path/to/license/file
  # or
  # helm install appscode/kubedb \
  #   --set global.license=<license file content>
  license: ""

  # Name of Secret with the license as key.txt key
  licenseSecretName: ""

  # Docker registry used to pull KubeDB related images
  registry: ""

  # Docker registry fqdn used to pull KubeDB related images.
  # Set this to use docker registry hosted at ${registryFQDN}/${registry}/${image}
  registryFQDN: ""

  # Specify an array of insecure registries.
  #
  # Example:
  # helm template charts/kubedb-ops-manager \
  #   --set global.insecureRegistries[0]=hub.company.com \
  #   --set global.insecureRegistries[1]=reg.example.com
  insecureRegistries: []

  # Specify an array of imagePullSecrets.
  # Secrets must be manually created in the namespace.
  #
  # Example:
  # helm template charts/kubedb \
  #   --set global.imagePullSecrets[0].name=sec0 \
  #   --set global.imagePullSecrets[1].name=sec1
  imagePullSecrets: []

  featureGates:
    Cassandra: false
    ClickHouse: false
    Druid: false
    Elasticsearch: true
    FerretDB: false
    Kafka: true
    MariaDB: true
    Memcached: false
    MongoDB: true
    MSSQLServer: false
    MySQL: true
    PerconaXtraDB: false
    PgBouncer: false
    Pgpool: false
    Postgres: true
    ProxySQL: false
    RabbitMQ: false
    Redis: true
    Singlestore: false
    Solr: false
    ZooKeeper: false

  monitoring:
    # Name of monitoring agent (one of "prometheus.io", "prometheus.io/operator", "prometheus.io/builtin")
    agent: ""
    serviceMonitor:
      # Specify the labels for ServiceMonitor.
      # Prometheus crd will select ServiceMonitor using these labels.
      # Only usable when monitoring agent is `prometheus.io/operator`.
      labels: # +doc-gen:break
        monitoring.appscode.com/prometheus: auto

  # The maximum number of concurrent reconciles which can be run
  maxConcurrentReconciles: 0
  # Node labels for pod assignment
  nodeSelector: # +doc-gen:break
    kubernetes.io/os: linux
  # Tolerations for pod assignment
  tolerations: []
  # Affinity rules for pod assignment
  affinity: {}

  waitForWebhook: true

  # Controls the network policy creation
  networkPolicy:
    enabled: false

petset:
  # If enabled, installs the petset chart
  enabled: true
sidekick:
  # If enabled, installs the sidekick chart
  enabled: true
supervisor:
  # If enabled, installs the supervisor chart
  enabled: false
kubedb-crd-manager:
  # If enabled, installs the kubedb-crd-manager chart
  enabled: true
kubedb-provisioner:
  # If enabled, installs the kubedb-provisioner chart
  enabled: true
kubedb-webhook-server:
  # If enabled, installs the kubedb-webhook-server chart
  enabled: true
kubedb-ops-manager:
  # If enabled, installs the kubedb-ops-manager chart
  enabled: true
kubedb-autoscaler:
  # If enabled, installs the kubedb-autoscaler chart
  enabled: true
kubedb-schema-manager:
  # If enabled, installs the kubedb-schema-manager chart
  enabled: false
kubedb-metrics:
  # If enabled, installs the kubedb-metrics chart
  enabled: false
kubedb-catalog:
  # If enabled, installs the kubedb-catalog chart
  enabled: true
kubedb-kubestash-catalog:
  # If enabled, installs the kubedb-kubestash-catalog chart
  enabled: true
ace-user-roles:
  # If enabled, installs the ace-user-roles chart
  enabled: true
  enableClusterRoles:
    ace: false
    appcatalog: true
    catalog: false
    cert-manager: false
    kubedb: true
    kubedb-ui: false
    kubestash: false
    kubevault: false
    license-proxyserver: true
    metrics: true
    prometheus: false
    stash: false
